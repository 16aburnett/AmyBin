// define instructions 
    // byte instructions[] = {
    //     OPCODE_LUI,     0x00, 0x6a, 0xe3, // [0x00] r0 <- 0x6ae3xxxx
    //     OPCODE_LLI,     0x00, 0xff, 0x57, // [0x04] r0 <- 0xxxxxff57
    //     OPCODE_LUI,     0x40, 0x33, 0x00, // [0x08] r4 <- 0x33
    //     OPCODE_LB,      0x14, 0x01, 0x00, // [0x0c] r1 <- [r4 + 1] (1 byte)
    //     OPCODE_ADD,     0x20, 0x10, 0x00, // [0x10] r2 <- r0 + r1 
    //     OPCODE_ADDI,    0x30, 0x01, 0x00, // [0x14] r2 <- r0 + 1
    //     OPCODE_SW,      0x40, 0x01, 0x00, // [0x18] [r4 + 1] <- r0
    //     OPCODE_ADDI,    0x09, 0x38, 0x00, // [0x1c] r0 <- r9 + 0x38
    //     OPCODE_LW,      0x10, 0x00, 0x00, // [0x20] r1 <- [r0 + 0]
    //     OPCODE_ADDI,    0x29, 0x03, 0x00, // [0x24] r2 <- r9 + 3
    //     OPCODE_SRA,     0x11, 0x20, 0x00, // [0x28] r1 <- r1 >> r2
    //     OPCODE_SW,      0x01, 0x00, 0x00, // [0x2c] [r0 + 0] <- r1
    //     OPCODE_HLT,     0x00, 0x00, 0x00, // [0x30] halt computer
    //     0xef,           0x3f, 0x43, 0xde, // [0x34] data (little endian)
    //     0xaa,           0x00, 0x00, 0xf0  // [0x38] data (little endian)
    // };